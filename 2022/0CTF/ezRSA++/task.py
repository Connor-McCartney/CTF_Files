from Crypto.Util.number import *
from os import urandom
from secret import flag

def ExGCD(a, b):
    if 0 == b:
        return 1, 0, a
    x, y, q = ExGCD(b, a % b)
    x, y = y, (x - a // b * y)
    return x, y, q

def gen(p_size, d_size, l_size):
    while True:
        p = getPrime(p_size)
        q = getPrime(p_size)
        if GCD(p - 1, q - 1) == 2:
            break
    d_p = getPrime(d_size)
    d_q = getPrime(d_size)
    s, t, g = ExGCD(p - 1, q - 1)
    if s < 0:
        s += q - 1
    else:
        t += p - 1
    n = p * q
    phi = (p - 1) * (q - 1)
    e = (inverse(d_p, p - 1) * t * (q - 1) + inverse(d_q, q - 1)  * s * (p - 1)) // g % phi
    assert (e * d_q % (q - 1) == 1)
    assert (e * d_p % (p - 1) == 1)
    k = (e * d_p - 1) // (p - 1)
    l = (e * d_q - 1) // (q - 1)
    return (n, e), (d_p, d_q, p, q), (d_p % (2**l_size), d_q % (2**l_size))
    
def encrypt(m, pk):
    n, e = pk
    return pow(m, e, n)

p_size = 1000
d_size = 105
l_size = 55
pk, sk, hint = gen(p_size, d_size, l_size)
flag = urandom(2 * p_size // 8 - len(flag) - 1) + flag
enc = encrypt(int(flag.hex(), 16), pk)
print(enc)
print(pk)
print(hint)

'''


(5013415024346389, 4333469053087705)
'''